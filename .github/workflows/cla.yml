# This workflow compile and push a docker image for release purposes
name: Java CI and release docker
on:
  workflow_dispatch:
  push:
    branches: [ github-action ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - uses: jfrog/setup-jfrog-cli@v1
      env:
        JF_ARTIFACTORY_1: ${{ secrets.HARISH_CLI_GITHUB_ACTIONS }}
    - run: |
        # Ping the server
        jfrog rt ping
    - uses: jfrog/setup-jfrog-cli@v1
      env:
        JF_ARTIFACTORY_1: ${{ secrets.ARTIFACTORY_TOKEN_BASE64 }}
        JFROG_CLI_LOG_LEVEL: DEBUG
    - run: |
        jfrog rt mvnc --global --server-id-resolve=olea --server-id-deploy=olea --repo-resolve-releases=olea-mvn --repo-resolve-snapshots=olea-mvn --repo-deploy-releases=olea-mvn --repo-deploy-snapshots=olea-mvn
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-jfrog-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-jfrog-
    - name: Build with Maven
      # skip tests because they are connecting to data sources
      run: jfrog rt mvn -Dmaven.test.skip.exec -B install
      env:
        JFROG_CLI_LOG_LEVEL: DEBUG
       M2_HOME: /usr/share/apache-maven-3.8.1 # If this is wrong, see output of mvn â€“version
    - name: Docker build
      run: |
        docker build -t $IMAGE_REPO_NAME --build-arg JAR_FILE=$IMAGE_REPO_NAME/target/$IMAGE_REPO_NAME.jar .
        docker tag $IMAGE_REPO_NAME olea.jfrog.io/olea-docker/$IMAGE_REPO_NAME:${GITHUB_REF##*/}
        jfrog rt dp olea.jfrog.io/olea-docker/$IMAGE_REPO_NAME:${GITHUB_REF##*/} olea-docker
      env:
        JFROG_CLI_LOG_LEVEL: DEBUG
        IMAGE_REPO_NAME: olea-sys-service
